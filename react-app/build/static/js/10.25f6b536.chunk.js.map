{"version":3,"sources":["_components/update-password/update-password.html.js","_components/update-password/update-password.js","_components/update-password/index.js"],"names":["UpdatePasswordHtml","_","state","username","password","errors","submitted","updateStatus","updatedPassword","className","Row","Col","xl","lg","md","sm","xs","Card","Title","src","Body","length","Alert","variant","Form","onSubmit","handleSubmit","Group","class","FloatingLabel","controlId","inputId","label","inputChange","Control","size","type","name","Button","onClick","updatePassword","UpdatePasswordComponent","props","authService","AuthenticationService","event","target","id","value","setState","validationErrorMessage","validateForm","valid","Object","entries","forEach","item","a","preventDefault","console","info","user","getStore","dispatch","AuthenticationActionCreators","login","history","push","then","response","data","hasOwnProperty","resetLinkSend","initialState","catch","err","resetStatus","log","this","Component","connect","profile","withRouter"],"mappings":"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","file":"static/js/10.25f6b536.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport FloatingLabel from \"react-bootstrap/FloatingLabel\";\r\nimport './update-password.css';\r\n\r\nconst UpdatePasswordHtml = (_) => {\r\n    //const {  passidErr, emailIdErr, authFail } = _.state.formErrors; \r\n    \r\n    const { username, password, errors, submitted, updateStatus, updatedPassword } = _.state;   \r\n    return (\r\n      <div className=\"home\">\r\n        <div className=\"container\">\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col xl=\"5\" lg=\"6\" md=\"7\" sm=\"8\" xs=\"12\">\r\n                {\r\n                    !updatedPassword ? \r\n                    <Card>\r\n                        \r\n                            <Card.Title>Set New Password</Card.Title>\r\n                            <Card.Body>\r\n                                { submitted && updateStatus.length > 0 &&  <Alert variant=\"danger\">{updateStatus}</Alert>}\r\n                                <Form onSubmit={_.handleSubmit}>\r\n                                    <Form.Group class=\"mb-3\">\r\n                                        <FloatingLabel\r\n                                            controlId=\"username\"\r\n                                            inputId=\"username\"\r\n                                            label=\"Email Or Phone Number\"\r\n                                            className = \"mb-3\"\r\n                                            className = {submitted && errors.username.length > 0 ? 'showError' : ''}\r\n                                            value={username}    \r\n                                            onChange={_.inputChange}    \r\n                                        >\r\n                                            <Form.Control size=\"lg\" type=\"text\" />\r\n\r\n                                        </FloatingLabel>\r\n                                        { submitted && errors.username.length > 0 &&  <small className='error'>{errors.username}</small>}\r\n                                    </Form.Group>\r\n                                    <Form.Group class=\"mb-3\">\r\n                                        <FloatingLabel\r\n                                            controlId=\"password\"\r\n                                            inputId=\"password\"\r\n                                            label=\"New Password\"\r\n                                            type=\"password\"\r\n                                            className=\"mb-3\"\r\n                                            className = {submitted && errors.password.length > 0 ? 'showError' : ''} \r\n                                            onChange={_.inputChange}\r\n                                            value={password}\r\n                                        >\r\n\r\n                                            <Form.Control size=\"lg\" type=\"password\" name=\"password\"/>  \r\n                                        </FloatingLabel>\r\n                                        { submitted && errors.password.length > 0 &&  <small className='error'>{errors.password}</small>}\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Button size=\"lg\" className=\"form-control\" variant=\"primary\" type=\"submit\" onClick={_.updatePassword}>Update Password</Button>\r\n                                    </Form.Group>\r\n                            \r\n                                </Form>\r\n                            </Card.Body>\r\n                    </Card>\r\n                    :\r\n                    <Card>\r\n                        <Card.Title className=\"align-center\">\r\n                            <img src=\"/assets/images/green-tick.svg\"/>\r\n                            <br/>\r\n                            <br/>\r\n                            Password Updated Successfully.\r\n                        </Card.Title>\r\n                        <Card.Body className=\"align-center\">\r\n                            Redirecting you to login page shortly.\r\n                        </Card.Body>\r\n                    </Card>\r\n                }\r\n            </Col>\r\n         \r\n          </Row>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n       \r\n    )\r\n}\r\n\r\nexport default UpdatePasswordHtml;","import React, { Component, useState } from 'react';\r\nimport { withRouter} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { AuthenticationActionCreators } from '../../_actions';\r\nimport { getStore, setStore } from '../../_utils';\r\nimport  UpdatePasswordHtml  from './update-password.html';\r\nimport { AuthenticationService } from '../../_services/auth.service';\r\n\r\nexport class UpdatePasswordComponent extends Component {\r\n\t\r\n\tauthService = new AuthenticationService();\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tconsole.log(this.props);\r\n\t\tthis.state = {\r\n\t\tusername: '',\r\n\t\tpassword: '',\r\n\t\terrors: {\r\n\t\t\tusername: 'Email is required!',\r\n\t\t\tpassword: 'Password is required!'\r\n\t\t},\r\n\t\tupdateStatus: '',\r\n\t\tupdatedPassword: false,\r\n\t\tsubmitted: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst user = getStore('user')\r\n\t\t// if (user) {\r\n\t\t// \tthis.props.dispatch(AuthenticationActionCreators.login(user));\r\n\t\t// \tthis.props.history.push('/calendar')\r\n\t\t// }\r\n\t}\r\n\tinputChange = (event) => {\r\n\t\tconst { id, value } = event.target;\r\n\t\tthis.setState({ [id]: value });\r\n\t\tthis.validationErrorMessage(event);\r\n\t}\r\n\r\n\tvalidationErrorMessage = (event) => {\r\n\t\tconst { id, value } = event.target;\r\n\t\tlet errors = this.state.errors;\r\n\t\tswitch (id) {\r\n\t\tcase 'username': \r\n\t\t\terrors.username = value.length < 1 ? 'Email is required' : '';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.setState({ errors });\r\n\t}\r\n\r\n\tvalidateForm = (errors) => {\r\n\t\tlet valid = true;\r\n\t\tObject.entries(errors).forEach(item => {\r\n\t\t\titem && item[1].length > 0 && (valid = false)\r\n\t\t});\r\n\t\treturn valid;\r\n\t}\r\n\r\n\tupdatePassword = async (event) => {\r\n\t\tthis.setState({ submitted: true });\r\n\t\tevent.preventDefault();\r\n\t\tif (this.validateForm(this.state.errors)) {\r\n\t\t\tconsole.info('Valid Form')\r\n\t\t\tconst user = getStore('user')\r\n\t\t\tif (user) {\r\n\t\t\t\tthis.props.dispatch(AuthenticationActionCreators.login(user));\r\n\t\t\t\tthis.props.history.push('/calendar')\r\n\t\t\t} else {\r\n\t\t\t\tthis.authService.updatePassword(this.state.username).then((response) => {\r\n\t\t\t\t\tif(response.data.hasOwnProperty('isSent')) {\r\n\t\t\t\t\t\tthis.setState({ resetLinkSend : true });\r\n\t\t\t\t\t\tthis.setState(this.initialState);\r\n\t\t\t\t\t} \r\n\t\t\t\t}).catch((err) => {\r\n\t\t\t\t\tthis.setState({ resetStatus: 'Reset link could not be sent to entered email or phone'})\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.log('Invalid Form')\r\n\t\t}\r\n\t}\r\n\r\n  render() {\r\n\t\r\n    return UpdatePasswordHtml(this)\r\n    \r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.user.profile\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withRouter(UpdatePasswordComponent));\r\n","import UpdatePasswordComponent from './update-password';\r\n\r\nexport default UpdatePasswordComponent;"],"sourceRoot":""}